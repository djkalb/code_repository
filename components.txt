searchable list of language folders

- databases containing different code or cheatsheets
- search dBs for description of code
- identify search matches then present to user
- copy into file automatically at specified line number
- select txt from current file and append it into local repository
- run() saves a record of state permitting users to go back , and continue from last spot on rerun
- copy will present user with list of files from cwd to choose from
- add will 


simplest version --- completed

-- run module from python in cmd choose from lst of text files open selected file 
-- uses inputs to interact (y/n)super simple 

version 1.0 -- almost completed 

-- query tables by descr. open selected results in a txt file  DONE
-- refine search using a nested dictionary use results to query more selectively DONE
-- run() saves a record of state permitting users to go back , and continue from last spot on rerun
-- add will read from txt file and place into dB  DONE
-- 



 version 2.0 will

-- allow users to copy or add into selected file in cwd at chosen line no -- the db does keep the formatting provided you print it
-- run saves state permitting users to go back
-- file explorer in cwd // configurable cwd
-- search allows refinements to search ie table / language / project / any column in dB
-- link the dB's together through clustered index -- so searches can refine 
-- search will return list of top 5 // if all results are 0 will ask to search again with different phrasing for new 
-- run will be able to nav through those choices with a next and back function
-- use dict as representative structure of tables // allow users to create modify their own datastructure
at every depth of structure option to create that layer ie at language layer add language
option to base it off other data structure??? or add own optional configs
only primary key every item entry will require descr table structure is optional descr configs
-- delete option ask confirmation then delete will also be performable at level of current depth|| cannot be undone
-- include basic tablelist already made // allow columns to be added / modified or creation of own 


NEED TO CREATE A WALK ALGORITHM FOR NESTED TABLES
same recursive search for dicts should work for table -- query table at current depth present list as dictionary
recall query for next selected item in nest 






run function
--control center for program
--based on input from prompt
--simple list of commands callable by number assignment
	back
	search -- usable for tables or specific descriptions maybe -- might need to be different algorithms
	find table -- going to keep file like structure in tables use recursive function to navigate 
	create table
	delete
	add
	open in txt editor
	exit - need to figure this out soon testing without it is a nightmare

-- will all be different functions called by run

search algorithm

-- executes from current working directory down -- ie a walk
-- searches text descriptions given to methods and returns a list of the greatest statistical matches
-- every entry or section can have a descr: /descr tag which the program can parse for similarity to search
-- top 10 matches will be returned with name and optional descr: attached.


back function

-- run will keep a record of state(ie funcs called and args passed) 
-- back will remove current state and rerun previous call
-- calls can then proceed from that new state
-- use optional args and attributes of functions to manage

refine search func

-- use the same recursive template i built for trial run, but navigate through dictionary layers instead
-- might need to create sql files on the run 
-- should just be able to query table names, and nav into them with searches and foreign keys def 
concept needs alot of work
-- need to create the nested dictionary based on sql commands

-- create navigable dictionary with names based on input 
	iterate list of values in with num associations 
	use it to refine the searches, but keep number of tables very low

copy function

--

Preconfig root inside repository for projects ie python project can set search for python only without 
navigating from root



add column of cosign similarity, maybe use as primary key, but need max character length













